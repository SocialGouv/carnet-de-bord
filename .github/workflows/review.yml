name: Review

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - v*

concurrency:
  cancel-in-progress: true
  group: ${{ github.ref }}

jobs:

  ##############################################################################
  ## BUILD AND REGISTER APP IMAGE
  ##############################################################################
  register:
    name: Register app image
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get project name
      run: |
        echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

    - name: Create image labels and tags
      id: docker_meta
      uses: "crazy-max/ghaction-docker-meta@2e1a5c7fa42123697f82d479b551a1bbdb1bef88"
      with:
        images: ghcr.io/socialgouv/${{ env.project }}
        labels: |
          org.opencontainers.image.title=${{ env.project }}
          org.opencontainers.image.documentation=https://github.com/SocialGouv/${{ env.project }}/tree/${{ github.sha }}
        tags: |
          type=sha
          type=ref,event=pr
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=raw,value=sha-${{ github.sha }}
          type=semver,pattern={{major}}.{{minor}}

    - name: Set up Buildx
      id: buildx
      uses: docker/setup-buildx-action@master
      with:
        install: true

    - name: Registry authentication
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        password: ${{ secrets.GITHUB_TOKEN }}
        username: ${{ secrets.SOCIALGROOVYBOT_NAME }}
        # password: ${{ secrets.SOCIALGROOVYBOT_GHCR_PAT }}

    - name: Set buildx cache up
      uses: "actions/cache@v2"
      with:
        key: "${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}"
        path: /tmp/.buildx-cache
        restore-keys: |
          ${{ runner.os }}-buildx

    - name: Image build and register
      uses: docker/build-push-action@v2
      with:
        context: .
        push: 'true'
        builder: ${{ steps.buildx.outputs.name }}
        tags: "${{ steps.docker_meta.outputs.tags }}"
        labels: "${{ steps.docker_meta.outputs.labels }}"
        cache-to: "type=local,dest=/tmp/.buildx-cache"
        cache-from: "type=local,src=/tmp/.buildx-cache"

  ##############################################################################
  ## BUILD AND REGISTER HASURA IMAGE
  ##############################################################################
  register-hasura:
    name: Register Hasura image
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get project name
      run: |
        echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

    - name: Create image labels and tags
      id: docker_meta
      uses: "crazy-max/ghaction-docker-meta@2e1a5c7fa42123697f82d479b551a1bbdb1bef88"
      with:
        images: ghcr.io/socialgouv/${{ env.project }}/hasura
        labels: |
          org.opencontainers.image.title=${{ env.project }}/hasura
          org.opencontainers.image.documentation=https://github.com/SocialGouv/${{ env.project }}/tree/${{ github.sha }}
        tags: |
          type=sha
          type=ref,event=pr
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=raw,value=sha-${{ github.sha }}
          type=semver,pattern={{major}}.{{minor}}

    - name: Set up Buildx
      id: buildx
      uses: docker/setup-buildx-action@master
      with:
        install: true

    - name: Registry authentication
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        password: ${{ secrets.GITHUB_TOKEN }}
        username: ${{ secrets.SOCIALGROOVYBOT_NAME }}
        # password: ${{ secrets.SOCIALGROOVYBOT_GHCR_PAT }}

    - name: Set buildx cache up
      uses: "actions/cache@v2"
      with:
        key: "${{ runner.os }}-buildx-hasura-${{ hashFiles('hasura/Dockerfile') }}"
        path: /tmp/.buildx-cache-hasura
        restore-keys: |
          ${{ runner.os }}-buildx-hasura

    - name: Image build and register
      uses: docker/build-push-action@v2
      with:
        context: .
        push: 'true'
        file: hasura/Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        tags: "${{ steps.docker_meta.outputs.tags }}"
        labels: "${{ steps.docker_meta.outputs.labels }}"
        cache-to: "type=local,dest=/tmp/.buildx-cache-hasura"
        cache-from: "type=local,src=/tmp/.buildx-cache-hasura"

  ##############################################################################
  ## GENERATE KUBERNETES MANIFESTS
  ##############################################################################
  manifests:
    name: Generate k8s manifests
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Load review environment variables
      run: |
        cat ".github/review.env" >> $GITHUB_ENV

    - name: Yarn cache setup
      uses: c-hive/gha-yarn-cache@v2

    - name: Install kosko-charts dependencies
      run: yarn --cwd .k8s install --frozen-lockfile --prefer-offline

    - name: Generate k8s manifests
      run: yarn --cwd .k8s --silent generate:dev > manifests.yml
      env:
        SOCIALGOUV_BASE_DOMAIN: ${{ env.SOCIALGOUV_BASE_DOMAIN }}

    - name: Generate k8s namespace
      run: yarn --cwd .k8s --silent generate:dev _namespace > namespace.yml
      env:
        SOCIALGOUV_BASE_DOMAIN: ${{ env.SOCIALGOUV_BASE_DOMAIN }}

    - name: Generate restore-db job manifest
      run: yarn --cwd .k8s --silent generate:dev jobs/restore > restore-db.yml
      env:
        SOCIALGOUV_BASE_DOMAIN: ${{ env.SOCIALGOUV_BASE_DOMAIN }}

    - name: Archive k8s manifests
      uses: actions/upload-artifact@v2
      with:
        name: manifests.yml
        path: manifests.yml

    - name: Archive k8s namespace
      uses: actions/upload-artifact@v2
      with:
        name: namespace.yml
        path: namespace.yml

    - name: Archive restore-db job
      uses: actions/upload-artifact@v2
      with:
        name: restore-db.yml
        path: restore-db.yml

  ##############################################################################
  ## DEPLOY BACKEND & FRONT-END
  ##############################################################################
  deploy-backend:
    name: Deploy application
    runs-on: ubuntu-latest
    needs: [register, register-hasura, manifests]
    steps:
  
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download k8s manifests
      uses: actions/download-artifact@v2
      with:
        name: manifests.yml

    - name: Download k8s namespace
      uses: actions/download-artifact@v2
      with:
        name: namespace.yml

    - name: Download restore-db job
      uses: actions/download-artifact@v2
      with:
        name: restore-db.yml

    - name: Get namespace name
      uses: mikefarah/yq@master
      id: namespace
      with:
        cmd: yq eval '.metadata.name' namespace.yml

    - name: Install Kapp
      uses: vmware-tanzu/carvel-setup-action@v1
      with:
        only: kapp
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get project and namespace names
      run: |
        cat ".github/review.env" >> $GITHUB_ENV
        echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
        echo "namespace=${NAMESPACE}" >> $GITHUB_ENV
      env:
        NAMESPACE: ${{ steps.namespace.outputs.result }}

    - name: Notify deployment start
      uses: bobheadxi/deployments@v0.6.0
      id: deployment
      with:
        step: start
        env: ${{ env.namespace }}
        token: ${{ secrets.GITHUB_TOKEN }}
        desc: "Deploying environment: ${{ env.namespace }}"

    - name: Create kubernetes config
      run: |
        mkdir ~/.kube
        touch ~/.kube/config
        echo ${{ secrets.SOCIALGOUV_KUBE_CONFIG_DEV2 }} | base64 -d > ~/.kube/config

    - name: Create k8s namespace and annotations
      run: kubectl create -f namespace.yml || true

    - name: Deploy application
      run: kapp --dangerous-override-ownership-of-existing-resources -y deploy -a ${{ env.project }} --namespace ${{ env.namespace }} -f manifests.yml

    - name: Seed database
      run: |
        kubectl delete -f restore-db.yml --namespace ${{ env.namespace }} || true
        kubectl apply -f restore-db.yml --namespace ${{ env.namespace }}

    - name: Notify deployment end
      uses: bobheadxi/deployments@v0.6.0
      if: always()
      with:
        step: finish
        status: ${{ job.status }}
        token: ${{ secrets.GITHUB_TOKEN }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env_url: https://${{ env.namespace }}.${{ env.SOCIALGOUV_BASE_DOMAIN }}
