name: Review

on:
  push:
    branches-ignore:
      - 'master'
    tags-ignore:
      - v*

concurrency:
  cancel-in-progress: true
  group: review-${{ github.ref }}

jobs:

  ##############################################################################
  ## CREATE POSTGRES DATABASE
  ##############################################################################
  create-db:
    name: Create postgres database
    runs-on: ubuntu-latest
    steps:

    - uses: SocialGouv/actions/autodevops-create-db@v1
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        rancherId: ${{ secrets.RANCHER_PROJECT_ID }}

  ##############################################################################
  ## BUILD AND REGISTER APP IMAGE
  ##############################################################################
  register-app:
    name: Build & Register application
    runs-on: ubuntu-latest
    steps:
      - name: Use autodevops build and register
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          imageName: carnet-de-bord/app
          token: ${{ secrets.GITHUB_TOKEN }}
          dockerbuildargs: |
            VITE_CRISP_WEBSITE_ID=2f9fd96d-44a0-4588-8f7e-a06a5a531c6f
            VITE_MATOMO_SITE_ID=53
            VITE_MATOMO_URL=https://matomo.fabrique.social.gouv.fr

  ##############################################################################
  ## BUILD AND REGISTER HASURA IMAGE
  ##############################################################################
  register-hasura:
    name: Build & Register Hasura
    runs-on: ubuntu-latest
    steps:
      - name: Use autodevops build and register
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          dockerfile: hasura/Dockerfile
          token: ${{ secrets.GITHUB_TOKEN }}
          imageName: carnet-de-bord/hasura

  ##############################################################################
  ## DEPLOY BACKEND & FRONT-END
  ##############################################################################
  deploy:
    name: Deploy review branch
    runs-on: ubuntu-latest
    needs: [register-app, register-hasura, create-db]
    steps:
      - name: Use autodevops deployment
        uses: SocialGouv/actions/autodevops-helm-deploy@v1
        with:
          environment: 'dev'
          token: ${{ secrets.GITHUB_TOKEN }}
          kubeconfig: ${{ secrets.KUBECONFIG }}
          rancherId: ${{ secrets.RANCHER_PROJECT_ID }}
          socialgouvBaseDomain: ${{ secrets.SOCIALGOUV_BASE_DOMAIN }}
          imageName: carnet-de-bord

  ##############################################################################
  ## SEED DATABASE
  ##############################################################################
  seed-db:
    name: Seed database
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - uses: SocialGouv/actions/autodevops-seed-db@v1
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}
          seedPath: hasura/seeds/carnet_de_bord/seed-data.sql

  ##############################################################################
  ## End To End Tests running on all branches
  ##############################################################################
  #e2e:
  #  name: run CodeceptJS tests
  #  runs-on: ubuntu-latest
  #  needs: [seed-db]
  #  steps:
  #    - name: Checkout repository
  #      uses: actions/checkout@v2
  #    - name: Yarn cache setup
  #      uses: c-hive/gha-yarn-cache@v2
  #    - name: Install dependencies
  #      run: |
  #        yarn --cwd e2e install --prefer-offline --frozen-lockfile
  #    - name: Download k8s manifests
  #      uses: actions/download-artifact@v2
  #      with:
  #        name: manifests-dev.yaml
  #    - name: Get deployment url
  #      uses: mikefarah/yq@v4.21.1
  #      id: app
  #      with:
  #        cmd: echo $(cat manifests.yaml | yq e '.spec.rules[]?.host' - | head -n 1)
  #    - name: Get hasura url
  #      uses: mikefarah/yq@v4.21.1
  #      id: hasura
  #      with:
  #        cmd: echo $(cat manifests.yaml | yq e '.spec.rules[]?.host' - | tail -n 1 )
  #    - name: Run test e2e
  #      run: |
  #        HASURA_ADMIN_SECRET=${{ secrets.HASURA_ADMIN_SECRET }} HASURA_BASEURL=https://${{ steps.hasura.outputs.result }}/v1/graphql CODECEPT_BASEURL=https://${{ steps.app.outputs.result }} yarn --cwd e2e test
  #    - name: Copy artifact
  #      if: failure()
  #      uses: actions/upload-artifact@v2
  #      with:
  #        name: screenshot
  #        path: e2e/output


  ##############################################################################
  ## Fonctionnal Tests (endpoints & hasura) running on all branches
  ##############################################################################
  fonctionnal_tests:
    name: run fonctionnal tests
    runs-on: ubuntu-latest
    needs: [seed-db]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Yarn cache setup
        uses: c-hive/gha-yarn-cache@v2
      - name: Install dependencies
        run: |
          yarn install --prefer-offline --frozen-lockfile
      - name: Download k8s manifests
        uses: actions/download-artifact@v2
        with:
          name: manifests-dev.yaml
      - name: Get deployment url
        uses: mikefarah/yq@v4.21.1
        id: app
        with:
          cmd: echo $(cat manifests.yaml | yq e '.spec.rules[]?.host' - | head -n 1)
      - name: Get hasura url
        uses: mikefarah/yq@v4.21.1
        id: hasura
        with:
          cmd: echo $(cat manifests.yaml | yq e '.spec.rules[]?.host' - | tail -n 1 )
      - name: Run test e2e
        run: |
          HASURA_ADMIN_SECRET=${{ secrets.HASURA_ADMIN_SECRET }} HASURA_BASEURL=https://${{ steps.hasura.outputs.result }}/v1/graphql CODECEPT_BASEURL=https://${{ steps.app.outputs.result }} yarn --cwd . test
