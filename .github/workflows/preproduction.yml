name: Preproduction

on:
  push:
    branches: [master]

concurrency:
  group: preproduction
  cancel-in-progress: true

jobs:
  ##############################################################################
  ## BUILD AND REGISTER APPLICATION IMAGE
  ##############################################################################
  register-app:
    name: Build & Register application
    runs-on: ubuntu-latest
    steps:
      - name: Get project name
        run: |
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Use autodevops build and register
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          environment: preprod
          project: ${{ env.project }}
          imageName: ${{ env.project }}/app
          token: ${{ secrets.GITHUB_TOKEN }}
          dockerbuildargs: |
            VITE_CRISP_WEBSITE_ID=2f9fd96d-44a0-4588-8f7e-a06a5a531c6f
            VITE_MATOMO_SITE_ID=53
            VITE_MATOMO_URL=https://matomo.fabrique.social.gouv.fr/

  ##############################################################################
  ## BUILD AND REGISTER HASURA IMAGE
  ##############################################################################
  register-hasura:
    name: Build & Register Hasura
    runs-on: ubuntu-latest
    steps:
      - name: Get project name
        run: |
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Use autodevops build and register
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          environment: preprod
          project: ${{ env.project }}
          dockerfile: hasura/Dockerfile
          token: ${{ secrets.GITHUB_TOKEN }}
          imageName: ${{ env.project }}/hasura

  ##############################################################################
  ## GENERATE PREPRODUCTION MANIFESTS
  ##############################################################################
  manifests:
    name: Preproduction manifests
    runs-on: ubuntu-latest
    steps:
      - name: Use autodevops manifests generation
        uses: SocialGouv/actions/k8s-manifests@v1
        with:
          environment: 'preprod'
          rancherId: ${{ secrets.RANCHER_PROJECT_ID }}
          socialgouvBaseDomain: ${{ secrets.SOCIALGOUV_BASE_DOMAIN }}

  ##############################################################################
  ## DEPLOY PREPRODUCTION APPLICATION
  ##############################################################################
  deploy:
    name: Deploy preproduction
    runs-on: ubuntu-latest
    needs: [register-app, register-hasura, manifests]
    environment:
      name: preproduction
      url: https://carnet-de-bord-preprod.dev.fabrique.social.gouv.fr/
    steps:
      - name: Use autodevops deployment
        uses: SocialGouv/actions/autodevops-deploy@v1
        with:
          environment: 'preprod'
          token: ${{ secrets.GITHUB_TOKEN }}
          kubeconfig: ${{ secrets.KUBECONFIG }}
          rancherId: ${{ secrets.RANCHER_PROJECT_ID }}

  ##############################################################################
  ## End To End Tests running on all branches
  ##############################################################################
  e2e:
    name: run CodeceptJS tests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Yarn cache setup
        uses: c-hive/gha-yarn-cache@v2
      - name: Install dependencies
        run: |
          yarn --cwd e2e install --prefer-offline --frozen-lockfile
      - name: Download k8s manifests
        uses: actions/download-artifact@v2
        with:
          name: manifests-dev.yml
      - name: Get deployment url
        uses: mikefarah/yq@v4.13.4
        id: url
        with:
          cmd: echo $(cat manifests-dev.yml | yq eval-all '.spec.rules[]?.host' - | head -n 1)
      - name: Run test e2e
        run: |
          CODECEPT_BASEURL=https://${{ steps.url.outputs.result }} yarn --cwd e2e test
      - name: Copy artifact
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: screenshot
          path: e2e/output/.failed.png
